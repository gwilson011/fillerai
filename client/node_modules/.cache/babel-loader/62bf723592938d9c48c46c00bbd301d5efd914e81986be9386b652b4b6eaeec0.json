{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst BOARD_SIZE = 8;\nconst initialBoard = Array.from({\n  length: BOARD_SIZE\n}, () => {\n  return Array.from({\n    length: BOARD_SIZE\n  }, () => 0);\n});\nconst initialState = {\n  board: Array(BOARD_SIZE).fill(Array(BOARD_SIZE).fill(0)),\n  currentPlayer: 1,\n  winner: null,\n  aiThinking: false,\n  socketConnected: false\n};\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState,\n  reducers: {\n    setBoard(state, action) {\n      state.board = action.payload;\n    },\n    setCurrentPlayer(state, action) {\n      state.currentPlayer = action.payload;\n    },\n    setWinner(state, action) {\n      state.winner = action.payload;\n    },\n    setThinking(state, action) {\n      state.aiThinking = action.payload;\n    },\n    setSocketConnected(state, action) {\n      state.socketConnected = action.payload;\n    }\n  }\n});\nexport const {\n  setBoard,\n  setCurrentPlayer,\n  setWinner,\n  setThinking,\n  setSocketConnected\n} = gameSlice.actions;\nexport default gameSlice.reducer;","map":{"version":3,"names":["createSlice","BOARD_SIZE","initialBoard","Array","from","length","initialState","board","fill","currentPlayer","winner","aiThinking","socketConnected","gameSlice","name","reducers","setBoard","state","action","payload","setCurrentPlayer","setWinner","setThinking","setSocketConnected","actions","reducer"],"sources":["/Users/gracewilson/fillerai/client/src/store/gameSplice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nconst BOARD_SIZE = 8;\n\ninterface GameState {\n    board: number[][];\n    currentPlayer: number;\n    winner: number | null;\n    aiThinking: boolean;\n    socketConnected: boolean;\n}\n\nconst initialBoard = Array.from({ length: BOARD_SIZE }, () => {\n    return Array.from({ length: BOARD_SIZE }, () => 0);\n});\n\nconst initialState: GameState = {\n    board: Array(BOARD_SIZE).fill(Array(BOARD_SIZE).fill(0)),\n    currentPlayer: 1,\n    winner: null,\n    aiThinking: false,\n    socketConnected: false,\n};\n\nconst gameSlice = createSlice({\n    name: \"game\",\n    initialState,\n    reducers: {\n        setBoard(state, action: PayloadAction<number[][]>) {\n            state.board = action.payload;\n        },\n        setCurrentPlayer(state, action: PayloadAction<number>) {\n            state.currentPlayer = action.payload;\n        },\n        setWinner(state, action: PayloadAction<number>) {\n            state.winner = action.payload;\n        },\n        setThinking(state, action: PayloadAction<boolean>) {\n            state.aiThinking = action.payload;\n        },\n        setSocketConnected(state, action: PayloadAction<boolean>) {\n            state.socketConnected = action.payload;\n        },\n    },\n});\n\nexport const {\n    setBoard,\n    setCurrentPlayer,\n    setWinner,\n    setThinking,\n    setSocketConnected,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,MAAMC,UAAU,GAAG,CAAC;AAUpB,MAAMC,YAAY,GAAGC,KAAK,CAACC,IAAI,CAAC;EAAEC,MAAM,EAAEJ;AAAW,CAAC,EAAE,MAAM;EAC1D,OAAOE,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEJ;EAAW,CAAC,EAAE,MAAM,CAAC,CAAC;AACtD,CAAC,CAAC;AAEF,MAAMK,YAAuB,GAAG;EAC5BC,KAAK,EAAEJ,KAAK,CAACF,UAAU,CAAC,CAACO,IAAI,CAACL,KAAK,CAACF,UAAU,CAAC,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;EACxDC,aAAa,EAAE,CAAC;EAChBC,MAAM,EAAE,IAAI;EACZC,UAAU,EAAE,KAAK;EACjBC,eAAe,EAAE;AACrB,CAAC;AAED,MAAMC,SAAS,GAAGb,WAAW,CAAC;EAC1Bc,IAAI,EAAE,MAAM;EACZR,YAAY;EACZS,QAAQ,EAAE;IACNC,QAAQA,CAACC,KAAK,EAAEC,MAAiC,EAAE;MAC/CD,KAAK,CAACV,KAAK,GAAGW,MAAM,CAACC,OAAO;IAChC,CAAC;IACDC,gBAAgBA,CAACH,KAAK,EAAEC,MAA6B,EAAE;MACnDD,KAAK,CAACR,aAAa,GAAGS,MAAM,CAACC,OAAO;IACxC,CAAC;IACDE,SAASA,CAACJ,KAAK,EAAEC,MAA6B,EAAE;MAC5CD,KAAK,CAACP,MAAM,GAAGQ,MAAM,CAACC,OAAO;IACjC,CAAC;IACDG,WAAWA,CAACL,KAAK,EAAEC,MAA8B,EAAE;MAC/CD,KAAK,CAACN,UAAU,GAAGO,MAAM,CAACC,OAAO;IACrC,CAAC;IACDI,kBAAkBA,CAACN,KAAK,EAAEC,MAA8B,EAAE;MACtDD,KAAK,CAACL,eAAe,GAAGM,MAAM,CAACC,OAAO;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EACTH,QAAQ;EACRI,gBAAgB;EAChBC,SAAS;EACTC,WAAW;EACXC;AACJ,CAAC,GAAGV,SAAS,CAACW,OAAO;AAErB,eAAeX,SAAS,CAACY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}